// ///////////////////////////////////////Username and Password////////////////////////////
// const express = require("express");
// const bodyParser = require("body-parser");
// const ejs = require("ejs");
// const mongoose = require("mongoose");

// const app = express();

// app.use(express.static("public"));
// app.set('view engine', 'ejs');
// app.use(bodyParser.urlencoded({
//     extended: true
// }));

// mongoose.connect("mongodb://127.0.0.1:27017/endUSersDB", {
//     useNewUrlParser: true,
//     useUnifiedTopology: true,
//     useCreateIndex: true
// });

// //Set up our new database
// //setup new user database
// const userSchema = new mongoose.Schema({
//     email: String,
//     password: String
// });

// //now we can start creating Users and adding it to this endUserDB
// const User = new mongoose.model("User", userSchema);


// app.get("/", function (req, res) {
//     res.render("home");
// });


// app.get("/login", function (req, res) {
//     res.render("login");
// });

// app.get("/register", function (req, res) {
//     res.render("register");
// });

// // Inside the callback is where we're going to create our brand new user
// app.post("/register", function (req, res) {
//     //this is going to be created using that user model here
//     const newUser = new User({
//         email: req.body.username,
//         password: req.body.password
//     });

//     newUser.save(function (err) {
//         if (err) {
//             console.log(err);
//         } else {
//             res.render("secrets");
//         }
//     })
// })

// app.post("/login", function (req, res) {
//     const username = req.body.username;
//     const password = req.body.password;

//     // username field comes from the user who's trying to log in 
//     // and the email field is the one in our database that's got the saved data
//     User.findOne({
//             email: username
//         }, function (err, foundUser) {
//             if (err) {
//                 console.log(err);
//             } else {
//                 if (foundUser) { //Does that user with that email exist?
//                     if (foundUser.password === password) {
//                         res.render("secrets")
//                 }
//             }
//         }
//     });

// });

// app.get('/logout', function(req, res){
//       res.redirect('/');
//   });

// app.listen(3000, function () {
//     console.log("Server started on port 30000");
// });



///////////////////////////////////////////Encryption/////////////////////////////////

//jshint esversion:6
// const express = require("express");
// const bodyParser = require("body-parser");
// const ejs = require("ejs");
// const mongoose = require("mongoose");
// const encrypt = require("mongoose-encryption");

// const app = express();

// app.use(express.static("public"));
// app.set('view engine', 'ejs');
// app.use(bodyParser.urlencoded({
//     extended: true
// }));

// mongoose.connect("mongodb://127.0.0.1:27017/endUSersDB", {
//     useNewUrlParser: true,
//     useUnifiedTopology: true,
//     useCreateIndex: true
// });

// //Set up our new database
// //setup new user database
// const userSchema = new mongoose.Schema({
//     email: String,
//     password: String
// });

// const secret = "Thisisourlittlesecret.";
// // plugin : add to mongoose schemas to extend their functionality or give them more powers essentially 
// // actually the power is "encrypt"
// // userSchema.plugin(encrypt, {secret: secret}); // Encrypt the enire database
// userSchema.plugin(encrypt, {secret: secret, encryptedFields: ["password"] }); // Encrypt oly certain fields
// // If yopu want multiple fields to encrypt ["password","email"]
// //Now we've added our encryption package to our userSchema,


// //now we can start creating Users and adding it to this endUserDB
// const User = new mongoose.model("User", userSchema);


// app.get("/", function (req, res) {
//     res.render("home");
// });


// app.get("/login", function (req, res) {
//     res.render("login");
// });

// app.get("/register", function (req, res) {
//     res.render("register");
// });

// // Inside the callback is where we're going to create our brand new user
// app.post("/register", function (req, res) {
//     //this is going to be created using that user model here
//     const newUser = new User({
//         email: req.body.username,
//         password: req.body.password
//     });

//     newUser.save(function (err) {
//         if (err) {
//             console.log(err);
//         } else {
//             res.render("secrets");
//         }
//     })
// })

// app.post("/login", function (req, res) {
//     const username = req.body.username;
//     const password = req.body.password;

//     // username field comes from the user who's trying to log in 
//     // and the email field is the one in our database that's got the saved data
//     User.findOne({
//             email: username
//         }, function (err, foundUser) {
//             if (err) {
//                 console.log(err);
//             } else {
//                 if (foundUser) { //Does that user with that email exist?
//                     if (foundUser.password === password) {
//                         res.render("secrets")
//                 }
//             }
//         }
//     });

// });

// app.get('/logout', function(req, res){
//       res.redirect('/');
//   });

// app.listen(3000, function () {
//     console.log("Server started on port 30000");
// });


//////////////////////////////////dotenv/////////////////////////////////////
//jshint esversion:6
// require('dotenv').config()
// const express = require("express");
// const bodyParser = require("body-parser");
// const ejs = require("ejs");
// const mongoose = require("mongoose");
// const encrypt = require("mongoose-encryption");

// const app = express();

// console.log(process.env.API_KEY);

// app.use(express.static("public"));
// app.set('view engine', 'ejs');
// app.use(bodyParser.urlencoded({
//     extended: true
// }));

// mongoose.connect("mongodb://127.0.0.1:27017/endUSersDB", {
//     useNewUrlParser: true,
//     useUnifiedTopology: true,
//     useCreateIndex: true
// });

// //Set up our new database
// //setup new user database
// const userSchema = new mongoose.Schema({
//     email: String,
//     password: String
// });

// // const secret = "Thisisourlittlesecret.";
// // plugin : add to mongoose schemas to extend their functionality or give them more powers essentially 
// // actually the power is "encrypt"
// // userSchema.plugin(encrypt, {secret: secret}); // Encrypt the enire database
// userSchema.plugin(encrypt, {secret: process.env.SECRET, encryptedFields: ["password"] }); // Encrypt oly certain fields
// // If yopu want multiple fields to encrypt ["password","email"]
// //Now we've added our encryption package to our userSchema,


// //now we can start creating Users and adding it to this endUserDB
// const User = new mongoose.model("User", userSchema);


// app.get("/", function (req, res) {
//     res.render("home");
// });


// app.get("/login", function (req, res) {
//     res.render("login");
// });

// app.get("/register", function (req, res) {
//     res.render("register");
// });

// // Inside the callback is where we're going to create our brand new user
// app.post("/register", function (req, res) {
//     //this is going to be created using that user model here
//     const newUser = new User({
//         email: req.body.username,
//         password: req.body.password
//     });

//     newUser.save(function (err) {
//         if (err) {
//             console.log(err);
//         } else {
//             res.render("secrets");
//         }
//     })
// })

// app.post("/login", function (req, res) {
//     const username = req.body.username;
//     const password = req.body.password;

//     // username field comes from the user who's trying to log in 
//     // and the email field is the one in our database that's got the saved data
//     User.findOne({
//             email: username
//         }, function (err, foundUser) {
//             if (err) {
//                 console.log(err);
//             } else {
//                 if (foundUser) { //Does that user with that email exist?
//                     if (foundUser.password === password) {
//                         res.render("secrets")
//                 }
//             }
//         }
//     });

// });


// app.get('/logout', function(req, res){
//       res.redirect('/');
//   });

// app.listen(3000, function () {
//     console.log("Server started on port 30000");
// });

////////////////////////////////////////////////MD%/////////////////////////////

//jshint esversion:6
// require('dotenv').config()
// const express = require("express");
// const bodyParser = require("body-parser");
// const ejs = require("ejs");
// const mongoose = require("mongoose");
// const md5 = require("md5");

// const app = express();

// console.log(md5("123456")); 
// //The hash that's created is always going to be the same

// app.use(express.static("public"));
// app.set('view engine', 'ejs');
// app.use(bodyParser.urlencoded({
//     extended: true
// }));

// mongoose.connect("mongodb://127.0.0.1:27017/endUSersDB", {
//     useNewUrlParser: true,
//     useUnifiedTopology: true,
//     useCreateIndex: true
// });

// //Set up our new database
// //setup new user database
// const userSchema = new mongoose.Schema({
//     email: String,
//     password: String
// });



// //now we can start creating Users and adding it to this endUserDB
// const User = new mongoose.model("User", userSchema);


// app.get("/", function (req, res) {
//     res.render("home");
// });


// app.get("/login", function (req, res) {
//     res.render("login");
// });

// app.get("/register", function (req, res) {
//     res.render("register");
// });

// // Inside the callback is where we're going to create our brand new user
// app.post("/register", function (req, res) {
//     //this is going to be created using that user model here
//     const newUser = new User({
//         email: req.body.username,
//         password: md5(req.body.password) //To turn that into a irreversible hash.
//     });

//     newUser.save(function (err) {
//         if (err) {
//             console.log(err);
//         } else {
//             res.render("secrets");
//         }
//     })
// })

// app.post("/login", function (req, res) {
//     const username = req.body.username;
//     const password = md5(req.body.password);

//     // username field comes from the user who's trying to log in 
//     // and the email field is the one in our database that's got the saved data
//     User.findOne({
//             email: username
//         }, function (err, foundUser) {
//             if (err) {
//                 console.log(err);
//             } else {
//                 if (foundUser) { //Does that user with that email exist?
//                     if (foundUser.password === password) {
//                         res.render("secrets")
//                 }
//             }
//         }
//     });

// });


// app.get('/logout', function(req, res){
//       res.redirect('/');
//   });

// app.listen(3000, function () {
//     console.log("Server started on port 30000");
// });


////////////////////////////////////////Bcrypt////////////////////////////////////////////////
//jshint esversion:6
// require('dotenv').config()
// const express = require("express");
// const bodyParser = require("body-parser");
// const ejs = require("ejs");
// const mongoose = require("mongoose");
// const bcrypt = require("bcrypt");
// const saltRounds = 10;

// const app = express();

// // console.log(md5("123456")); 
// //The hash that's created is always going to be the same

// app.use(express.static("public"));
// app.set('view engine', 'ejs');
// app.use(bodyParser.urlencoded({
//     extended: true
// }));

// mongoose.connect("mongodb://127.0.0.1:27017/endUSersDB", {
//     useNewUrlParser: true,
//     useUnifiedTopology: true,
//     useCreateIndex: true
// });

// //Set up our new database
// //setup new user database
// const userSchema = new mongoose.Schema({
//     email: String,
//     password: String
// });



// //now we can start creating Users and adding it to this endUserDB
// const User = new mongoose.model("User", userSchema);


// app.get("/", function (req, res) {
//     res.render("home");
// });


// app.get("/login", function (req, res) {
//     res.render("login");
// });

// app.get("/register", function (req, res) {
//     res.render("register");
// });

// // Inside the callback is where we're going to create our brand new user
// app.post("/register", function (req, res) {
//     bcrypt.hash(req.body.password, saltRounds, function(err, hash) {
//         // Store hash in your password DB.
//         //this is going to be created using that user model here
//         const newUser = new User({
//             email: req.body.username,
//             password: hash //To turn that into a irreversible hash.
//         });
//     newUser.save(function (err) {
//         if (err) {
//             console.log(err);
//         } else {
//             res.render("secrets");
//         }
//     });
//   });
// })

// app.post("/login", function (req, res) {
//     const username = req.body.username;
//     const password = req.body.password;

//     // username field comes from the user who's trying to log in 
//     // and the email field is the one in our database that's got the saved data
//     User.findOne({
//             email: username
//         }, function (err, foundUser) {
//             if (err) {
//                 console.log(err);
//             } else {
//                 if (foundUser) { //Does that user with that email exist?
//                     bcrypt.compare(password, foundUser.password, function(err, result) {
//                         // result == true
//                         if (result === true) {
//                             res.render("secrets");
//                         }
//                     });

//                 }
//             }
//     });

// });


// app.get('/logout', function(req, res){
//       res.redirect('/');
//   });

// app.listen(3000, function () {
//     console.log("Server started on port 30000");
// });

/////////////////////////////////////////////////Cookies and Sessions//////////////////////////////

//jshint esversion:6
// require('dotenv').config()
// const express = require("express");
// const bodyParser = require("body-parser");
// const ejs = require("ejs");
// const mongoose = require("mongoose");
// const session = require("express-session");
// const passport = require("passport");
// const passportLocalMongoose = require("passport-local-mongoose");

// const app = express();

// app.use(express.static("public"));
// app.set('view engine', 'ejs');
// app.use(bodyParser.urlencoded({
//     extended: true
// }));

// //Set up our Session
// app.use(session({
//     secret: "Our little secret.",
//     resave: false,
//     saveUninitialized: false
// }));

// app.use(passport.initialize());
// //Passport for managing session
// app.use(passport.session());

// mongoose.connect("mongodb://127.0.0.1:27017/endUSersDB", {
//     useNewUrlParser: true,
//     useUnifiedTopology: true,
//     useCreateIndex: true
// });

// //Set up our new database
// //setup new user database
// const userSchema = new mongoose.Schema({
//     email: String,
//     password: String
// });

// //This is what we're going to use to hash and salting our passwords and to save our users into our MongoDB database.
// userSchema.plugin(passportLocalMongoose);

// //now we can start creating Users and adding it to this endUserDB
// const User = new mongoose.model("User", userSchema);

// //Its going to be the local strategy to authenticate users using their username and password serialize and deserialize
// //Serialize and deserialize is only necessary when we're using sessions
// //Serialize ; creates fortune cookie and stuffs the message namely our users identifications into the cookie
// //Deserialize : Allow Passport to be able to crumble the cookie and discover the message inside which is who this user is!
// passport.use(User.createStrategy());

// passport.serializeUser(User.serializeUser());
// passport.deserializeUser(User.deserializeUser());


// app.get("/", function (req, res) {
//     res.render("home");
// });


// app.get("/login", function (req, res) {
//     res.render("login");
// });

// app.get("/register", function (req, res) {
//     res.render("register");
// });

// app.get("/secrets", function(req, res) {
//     //check if the user is authenticated and this is where we're relying on passport, session, passport-local,p-l-m
//     //nake sure that if a user is alreay logged in then we should simply  render secrets
//     if(req.isAuthenticated()){
//         res.render("secrets");
//     } else {
//         res.redirect("/login");
//     }
// });

// app.get("/logout", function(req, res){
//     req.session.destroy();
//     res.redirect("/");
// });

// // Inside the callback is where we're going to create our brand new user
// app.post("/register", function (req, res) {
//     // This method comes from the passport-local-mongoose package
//     // that we can avoid creating our new userSchema, saving our user and interacting with mongoose directly
//     User.register({username: req.body.username}, req.body.password, function(err, User) {
//         if(err) {
//             console.log(err);
//             res.redirect("/register");
//         } else {
//             // cookie has a few pieces of information that tells our server about the user, namely that they are authorized
//             passport.authenticate("local")(req, res, function(){ //authentication was successful & we managed to successfully setup a cookie that saved their current logged in session
//                 res.redirect("/secrets");
//             });
//         }
//     });
// });

// app.post("/login", function (req, res) {
//     const user = new User({
//         username: req.body.username,
//         password: req.body.password
//     });

//     req.login(user, function(err) {
//         if (err) {
//             console.log(err);
//         } else {
//             passport.authenticate("local")(req, res, function(){ 
//                 res.redirect("/secrets");
//             });
//         }
//     });
// });


// app.listen(3000, function () {
//     console.log("Server started on port 30000");
// });

////////////////////////////////////////////////////////////////////////////////////